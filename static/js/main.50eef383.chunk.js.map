{"version":3,"sources":["components/Key.js","constants.js","components/Calculator.js","App.js","serviceWorker.js","store/actions.js","store/reducers.js","index.js"],"names":["Key","props","handleClick","bind","this","name","id","className","class","keyCode","onClick","React","Component","INITIAL_STATE","CreateKey","additionalKey","keyboard","ERASE","UPDATE_DISPLAY","Calculator","document","addEventListener","handleKeyPress","removeEventListener","keyboardComponent","map","obj","index","solve","key","formula","input","App","Boolean","window","location","hostname","match","updateDisplay","newState","type","cnst","combineReducers","rootReducer","state","action","Object","assign","isPrevCalculate","addDecimal","store","createStore","reducers","applyMiddleware","thunk","Container","connect","dispatchProps","dispatch","currentInput","test","length","setTimeout","replace","result","indexOf","Function","calculate","toString","event","str","shiftKey","getElementsByClassName","click","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50eef383.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Key extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        if (this.props.name !== '=') {\r\n            this.props.handleClick(this.props.name);\r\n        } else {\r\n            this.props.handleClick();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                id={this.props.id}\r\n                className={'key ' + this.props.class + ' ' + this.props.keyCode}\r\n                onClick={this.handleClick}\r\n            >\r\n                {this.props.name}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Key;","export const INITIAL_STATE = {\r\n    'rootReducer': {\r\n        'formula': 0,\r\n        'input': 0,\r\n        'isPrevCalculate': false,\r\n        'addDecimal': false\r\n    }\r\n};\r\n\r\nfunction CreateKey(name, id, className, keyCode, additionalKey) {\r\n    return {\r\n        name,\r\n        id,\r\n        className,\r\n        keyCode,\r\n        additionalKey\r\n    }\r\n}\r\nexport const keyboard = [\r\n    CreateKey('AC', 'clear', 'clear', 8),\r\n    CreateKey('/', 'divide', 'ops', 191),\r\n    CreateKey('*', 'multiply', 'ops', 16, 'shiftKey'),\r\n    CreateKey('7', 'seven', 'nums', 55),\r\n    CreateKey('8', 'eight', 'nums', 56),\r\n    CreateKey('9', 'nine', 'nums', 57),\r\n    CreateKey('-', 'subtract', 'ops', 189),\r\n    CreateKey('4', 'four', 'nums', 52),\r\n    CreateKey('5', 'five', 'nums', 53),\r\n    CreateKey('6', 'six', 'nums', 54),\r\n    CreateKey('+', 'add', 'ops', 187, 'shiftKey'),\r\n    CreateKey('1', 'one', 'nums', 49),\r\n    CreateKey('2', 'two', 'nums', 50),\r\n    CreateKey('3', 'three', 'nums', 51),\r\n    CreateKey('0', 'zero', 'nums', 48),\r\n    CreateKey('.', 'decimal', 'nums', 190),\r\n    CreateKey('=', 'equals', 'equals', 187),\r\n];\r\n\r\nexport const ERASE = 'ERASE';\r\nexport const UPDATE_DISPLAY = 'UPDATE_DISPLAY';\r\nexport const DIGIT_LIMIT_MET = 'DIGIT LIMIT MET';\r\nexport const DIGIT_LIMIT = 18;","import React from 'react';\r\nimport Key from './Key';\r\nimport {keyboard} from \"../constants\";\r\n\r\nclass Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.props.handleKeyPress);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keydown', this.props.handleKeyPress);\r\n    }\r\n\r\n    render() {\r\n        const keyboardComponent = keyboard.map((obj, index) => {\r\n            const handleClick = obj.name !== '=' ? this.props.handleClick : this.props.solve;\r\n            let keyCode = obj.keyCode;\r\n            keyCode += obj.additionalKey ? obj.additionalKey : '';\r\n            return (\r\n                <Key\r\n                    name={obj.name}\r\n                    id={obj.id}\r\n                    class={obj.className}\r\n                    key={index}\r\n                    keyCode={keyCode}\r\n                    handleClick={handleClick}\r\n                />);\r\n        });\r\n\r\n        return (\r\n            <div id={'calculator'}>\r\n                <div id={'screen'}>\r\n                    <div id={'formula'}>{this.props.formula}</div>\r\n                    <div id={'display'}>{this.props.input}</div>\r\n                </div>\r\n                {keyboardComponent}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\nimport './App.css';\r\nimport Calculator from './components/Calculator';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render () {\r\n    return (\r\n        <div className=\"App\">\r\n          <Calculator\r\n              formula={this.props.formula}\r\n              input={this.props.input}\r\n              handleClick={this.props.handleClick}\r\n              solve={this.props.solve}\r\n              handleKeyPress={this.props.handleKeyPress}\r\n          />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as cnst from '../constants';\r\n\r\nconst updateDisplay = (newState) => {\r\n  return {\r\n      type: cnst.UPDATE_DISPLAY,\r\n      newState\r\n  };\r\n};\r\n\r\nconst erase = () => {\r\n    return {\r\n        type: cnst.ERASE\r\n    };\r\n};\r\n\r\nconst calculate = (formula) => {\r\n    if (formula.indexOf('=') === -1) {\r\n        let result = new Function('return ' + formula );\r\n        return result();\r\n    }\r\n};\r\n\r\nexport const mapStateToProps = (state) => {\r\n    return {\r\n        formula: state.rootReducer.formula,\r\n        input: state.rootReducer.input,\r\n        isPrevCalculate: state.rootReducer.isPrevCalculate,\r\n        addDecimal: state.rootReducer.addDecimal\r\n    };\r\n};\r\n\r\nexport const mergeProps = (state, dispatchProps) => {\r\n    const {formula, input, isPrevCalculate, addDecimal} = state;\r\n    const { dispatch } = dispatchProps;\r\n\r\n    let newState = Object.assign({}, state);\r\n    newState.isPrevCalculate = false;\r\n\r\n    return {\r\n        formula,\r\n        input,\r\n        isPrevCalculate,\r\n        addDecimal,\r\n        handleClick: (currentInput) => {\r\n            if (state.input !== cnst.DIGIT_LIMIT_MET) {\r\n                if (/[\\d]/.test(currentInput)) {\r\n                    // handle num\r\n                    if (state.input.length >= cnst.DIGIT_LIMIT && !(/[-+*/]$/.test(state.formula)) && !state.isPrevCalculate) {\r\n                        newState.input = cnst.DIGIT_LIMIT_MET;\r\n                        setTimeout(() => {\r\n                            dispatch(updateDisplay(state));\r\n                        }, 800, state, dispatch, updateDisplay());\r\n                        dispatch(updateDisplay(newState));\r\n                        return;\r\n\r\n                    }\r\n                    if (state.input != 0 && !(/[-+*/]$/.test(state.formula)) && !state.isPrevCalculate) {\r\n                        newState.input = state.input + currentInput;\r\n                    } else if (currentInput == 0 && state.input == 0) {\r\n                        dispatch(updateDisplay(state));\r\n                        return;\r\n\r\n                    } else {\r\n                        newState.input = currentInput;\r\n                        if (newState.formula == 0 || state.isPrevCalculate) {\r\n                            newState.formula = '';\r\n                        }\r\n                    }\r\n                    newState.formula += currentInput;\r\n                    dispatch(updateDisplay(newState));\r\n\r\n\r\n                } else if (/[-+/*]/.test(currentInput)) {\r\n                    // handle op\r\n                    newState.addDecimal = false;\r\n                    if (/[+*-/]$/.test(state.formula) && currentInput !== '-') {\r\n                        newState.formula = state.formula.replace(/[+-/*]+$/, '');\r\n                    }\r\n                    if (state.isPrevCalculate) {\r\n                        newState.formula = state.input;\r\n                    }\r\n                    newState.input = state.input;\r\n                    newState.formula += currentInput;\r\n                    dispatch(updateDisplay(newState));\r\n\r\n\r\n                } else if (currentInput === 'AC') {\r\n                    // handle erase\r\n                    dispatch(erase());\r\n\r\n\r\n                } else if (currentInput === '.') {\r\n                    // handle decimal\r\n                    if (state.addDecimal) {\r\n                        dispatch(updateDisplay(state));\r\n\r\n                    } else {\r\n                        newState.addDecimal = true;\r\n                        if (state.isPrevCalculate) {\r\n                            newState.input = '0';\r\n                            newState.formula = '0';\r\n                        }\r\n                        newState.input += '.';\r\n                        newState.formula += '.';\r\n                        dispatch(updateDisplay(newState));\r\n\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        solve: () => {\r\n            const result = calculate(state.formula);\r\n            if (!state.isPrevCalculate) {\r\n                newState.formula = state.formula + '=' + result;\r\n                newState.input = result;\r\n                if (result.toString().indexOf('.') === -1) {\r\n                    newState.addDecimal = false;\r\n                }\r\n                newState.isPrevCalculate = true;\r\n                dispatch(updateDisplay(newState));\r\n\r\n            } else {\r\n                dispatch(updateDisplay(state));\r\n\r\n            }\r\n        },\r\n        handleKeyPress: (event) => {\r\n            let str = event.keyCode;\r\n            str += event.shiftKey ? 'shiftKey' : '';\r\n            const key = document.getElementsByClassName(str)[0];\r\n            if (key) {\r\n                key.click();\r\n            }\r\n        }\r\n    };\r\n};","import {combineReducers} from \"redux\";\r\nimport * as cnst from '../constants';\r\n\r\nfunction rootReducer(state = cnst.INITIAL_STATE, action = {'type': 'default'}) {\r\n    switch (action.type) {\r\n        case cnst.ERASE:\r\n            let newState = Object.assign({}, state);\r\n            newState.isPrevCalculate = false;\r\n            newState.input = 0;\r\n            newState.formula = 0;\r\n            newState.addDecimal = false;\r\n            return newState;\r\n\r\n        case cnst.UPDATE_DISPLAY:\r\n            return Object.assign({}, action.newState);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({rootReducer});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {createStore, applyMiddleware} from \"redux\";\r\nimport {mapStateToProps, mergeProps} from \"./store/actions\";\r\nimport {Provider, connect} from 'react-redux';\r\nimport reducers from './store/reducers';\r\nimport thunk from 'redux-thunk';\r\nimport {INITIAL_STATE} from \"./constants\";\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    INITIAL_STATE,\r\n    applyMiddleware(thunk)\r\n);\r\n\r\nconst Container = connect(mapStateToProps, null, mergeProps)(App);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Container/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}